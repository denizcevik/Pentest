#!/usr/bin/perl
#######################################################################
#
# Copyright (c) 1996-2007 inTellectPRO A.S. All Rights Reserved
#
# This program code is licensed under the GNU General Public License.
#
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2  of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# http://www.gnu.org/licenses/gpl.txt
#
#
# Please contact proser@intellectpro.com.tr for further questions
#

use Time::HiRes qw(usleep nanosleep);
use IO::Socket;

@FIPA = ();
@LIPA = ();
@counter = ();
$FIRSTIP=$ARGV[0];
$LASTIP=$ARGV[1];
$i=0;
$j=0;

sub calculate_scan_range
{
    $FIRSTIP =~ m/\b(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\b/;
    if (($1 > 255) || ($2 > 255) || ($3 > 255) || ($4 > 255))
    {
         print "Wrong IP Adress\r\n";
         exit;
    }
    else
    {
        push(@FIPA,$1);push(@FIPA,$2);push(@FIPA,$3);push(@FIPA,$4);
    }
    $LASTIP =~ m/\b(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\b/;
    if (($1 > 255) || ($2 > 255) || ($3 > 255) || ($4 > 255))
    {
         print "Wrong IP Adress\r\n";
         exit;
    }
    else
    {
        push(@LIPA,$1);push(@LIPA,$2);push(@LIPA,$3);push(@LIPA,$4);
    }
    for ($i=0;$i<4;$i++)
    {
        if ($FIPA[$i] > $LIPA[$i])
        {
            print "IP Range is Invalid\r\n";
            exit;
        }
        else 
        {
             $diff=$LIPA[$i] - $FIPA[$i];
             push(@counter,$diff);
        }
    }

for ($l=0;$l<=$counter[0];$l++){
 for ($k=0;$k<=$counter[1];$k++){
  for ($j=0;$j<=$counter[2];$j++){
   for ($i=0;$i<=$counter[3];$i++){
       $OCT3 = $FIPA[3] + $i;
       $OCT2 = $FIPA[2] + $j;
       $OCT1 = $FIPA[1] + $k;
       $OCT0 = $FIPA[0] + $l;
       $IP="$OCT0.$OCT1.$OCT2.$OCT3";
       #print "$IP\r\n";
       &find_reverse_record($IP); 
   }
  }
 }
}

}

sub find_reverse_record
{
   $nameofip=gethostbyaddr(inet_aton($_[0] ),AF_INET);
   #usleep(100);
   if ($nameofip =~ m/[A-Za-z0-9]+/)
   { 
       print "$_[0]         $nameofip\r\n";
   }
}

sub usage
{
    print "---------------------------------------------------------------\r\n";
    print "-                  Simple Reverse DNS Scanner                 -\r\n";
    print "-                      www.ttlexpired.com                     -\r\n";
    print "-                                                             -\r\n";
    print "-      usage: perl rdns-scanner.pl <FIRST_IP> <LAST_IP>       -\r\n";
    print "-      example: perl rdns-scanner.pl 10.0.0.1 10.0.0.255      -\r\n";
    print "---------------------------------------------------------------\r\n";
}

if (@ARGV < 2)
{
    &usage;
    exit();
}
else
{
    print "----------------------------------------\r\n";
    print "        Simple Reverse DNS Scanner      \r\n";
    print "            www.ttlexpired.com          \r\n";
    print "                                        \r\n";
    print "----------------------------------------\r\n";
    print "IP Address          Hostname            \r\n";
    print "----------------------------------------\r\n";
    &calculate_scan_range;
    print "----------------------------------------\r\n";
    print "done.\r\n";
}